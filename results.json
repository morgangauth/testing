{
  "SourcegraphEndpoint": "https://cse-k8s.sgdev.org",
  "Query": "context:global import AND accountId",
  "Site": {
    "BuildVersion": "5.1.9"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "bb6b2bf6293ab3c20f0d52b7ca53adb03f6dedd3"
        },
        "content": "// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.gerrit.server.logging;\n\nimport com.google.auto.value.AutoValue;\nimport com.google.common.base.MoreObjects;\nimport com.google.common.base.MoreObjects.ToStringHelper;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.flogger.LazyArg;\nimport com.google.common.flogger.LazyArgs;\nimport com.google.gerrit.common.Nullable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Optional;\n\n/** Metadata that is provided to {@link PerformanceLogger}s as context for performance records. */\n@AutoValue\npublic abstract class Metadata {\n  /** The numeric ID of an account. */\n  public abstract Optional\u003cInteger\u003e accountId();\n\n  /**\n   * The type of an action (ACCOUNT_UPDATE, CHANGE_UPDATE, GROUP_UPDATE, INDEX_QUERY,\n   * PLUGIN_UPDATE).\n   */\n  public abstract Optional\u003cString\u003e actionType();\n\n  /** An authentication domain name. */\n  public abstract Optional\u003cString\u003e authDomainName();\n\n  /** The name of a branch. */\n  public abstract Optional\u003cString\u003e branchName();\n\n  /** Key of an entity in a cache. */\n  public abstract Optional\u003cString\u003e cacheKey();\n\n  /** The name of a cache. */\n  public abstract Optional\u003cString\u003e cacheName();\n\n  /** The name of the implementation class. */\n  public abstract Optional\u003cString\u003e className();\n\n  /**\n   * The reason of a request cancellation (CLIENT_CLOSED_REQUEST, CLIENT_PROVIDED_DEADLINE_EXCEEDED,\n   * SERVER_DEADLINE_EXCEEDED).\n   */\n  public abstract Optional\u003cString\u003e cancellationReason();\n\n  /** The numeric ID of a change. */\n  public abstract Optional\u003cInteger\u003e changeId();\n\n  /**\n   * The type of change ID which the user used to identify a change (e.g. numeric ID, triplet etc.).\n   */\n  public abstract Optional\u003cString\u003e changeIdType();\n\n  /** The cause of an error. */\n  public abstract Optional\u003cString\u003e cause();\n\n  /** Side where the comment is written: \u003c= 0 for parent, 1 for revision. */\n  public abstract Optional\u003cInteger\u003e commentSide();\n\n  /** The SHA1 of a commit. */\n  public abstract Optional\u003cString\u003e commit();\n\n  /** Diff algorithm used in diff computation. */\n  public abstract Optional\u003cString\u003e diffAlgorithm();\n\n  /** The type of an event. */\n  public abstract Optional\u003cString\u003e eventType();\n\n  /** The value of the @Export annotation which was used to register a plugin extension. */\n  public abstract Optional\u003cString\u003e exportValue();\n\n  /** Path of a file in a repository. */\n  public abstract Optional\u003cString\u003e filePath();\n\n  /** Garbage collector name. */\n  public abstract Optional\u003cString\u003e garbageCollectorName();\n\n  /** Git operation (CLONE, FETCH). */\n  public abstract Optional\u003cString\u003e gitOperation();\n\n  /** The numeric ID of an internal group. */\n  public abstract Optional\u003cInteger\u003e groupId();\n\n  /** The name of a group. */\n  public abstract Optional\u003cString\u003e groupName();\n\n  /** The group system being queried. */\n  public abstract Optional\u003cString\u003e groupSystem();\n\n  /** The UUID of a group. */\n  public abstract Optional\u003cString\u003e groupUuid();\n\n  /** HTTP status response code. */\n  public abstract Optional\u003cInteger\u003e httpStatus();\n\n  /** The name of a secondary index. */\n  public abstract Optional\u003cString\u003e indexName();\n\n  /** The version of a secondary index. */\n  public abstract Optional\u003cInteger\u003e indexVersion();\n\n  /** The name of the implementation method. */\n  public abstract Optional\u003cString\u003e memoryPoolName();\n\n  /** The name of the implementation method. */\n  public abstract Optional\u003cString\u003e methodName();\n\n  /** One or more resources */\n  public abstract Optional\u003cBoolean\u003e multiple();\n\n  /** The name of an operation that is performed. */\n  public abstract Optional\u003cString\u003e operationName();\n\n  /** Partial or full computation */\n  public abstract Optional\u003cBoolean\u003e partial();\n\n  /** If a value is still current or not */\n  public abstract Optional\u003cBoolean\u003e outdated();\n\n  /** Path of a metadata file in NoteDb. */\n  public abstract Optional\u003cString\u003e noteDbFilePath();\n\n  /** Name of a metadata ref in NoteDb. */\n  public abstract Optional\u003cString\u003e noteDbRefName();\n\n  /** Type of a sequence in NoteDb (ACCOUNTS, CHANGES, GROUPS). */\n  public abstract Optional\u003cString\u003e noteDbSequenceType();\n\n  /** The ID of a patch set. */\n  public abstract Optional\u003cInteger\u003e patchSetId();\n\n  /** Plugin metadata that doesn't fit into any other category. */\n  public abstract ImmutableList\u003cPluginMetadata\u003e pluginMetadata();\n\n  /** The name of a plugin. */\n  public abstract Optional\u003cString\u003e pluginName();\n\n  /** The name of a Gerrit project (aka Git repository). */\n  public abstract Optional\u003cString\u003e projectName();\n\n  /** The type of a Git push to Gerrit (CREATE_REPLACE, NORMAL, AUTOCLOSE). */\n  public abstract Optional\u003cString\u003e pushType();\n\n  /** The type of a Git push to Gerrit (GIT_RECEIVE, GIT_UPLOAD, REST, SSH). */\n  public abstract Optional\u003cString\u003e requestType();\n\n  /** The number of resources that is processed. */\n  public abstract Optional\u003cInteger\u003e resourceCount();\n\n  /** The name of a REST view. */\n  public abstract Optional\u003cString\u003e restViewName();\n\n  public abstract Optional\u003cString\u003e submitRequirementName();\n\n  /** The SHA1 of Git commit. */\n  public abstract Optional\u003cString\u003e revision();\n\n  /** The username of an account. */\n  public abstract Optional\u003cString\u003e username();\n\n  /**\n   * Returns a string representation of this instance that is suitable for logging. This is wrapped\n   * in a {@link LazyArg} because it is expensive to evaluate.\n   *\n   * \u003cp\u003e{@link #toString()} formats the {@link Optional} fields as {@code key=Optional[value]} or\n   * {@code key=Optional.empty}. Since this class has many optional fields from which usually only a\n   * few are populated this leads to long string representations such as\n   *\n   * \u003cpre\u003e\n   * Metadata{accountId=Optional.empty, actionType=Optional.empty, authDomainName=Optional.empty,\n   * branchName=Optional.empty, cacheKey=Optional.empty, cacheName=Optional.empty,\n   * className=Optional.empty, cancellationReason=Optional.empty changeId=Optional[9212550],\n   * changeIdType=Optional.empty, cause=Optional.empty, diffAlgorithm=Optional.empty,\n   * eventType=Optional.empty, exportValue=Optional.empty, filePath=Optional.empty,\n   * garbageCollectorName=Optional.empty, gitOperation=Optional.empty, groupId=Optional.empty,\n   * groupName=Optional.empty, groupUuid=Optional.empty, httpStatus=Optional.empty,\n   * indexName=Optional.empty, indexVersion=Optional[0], methodName=Optional.empty,\n   * multiple=Optional.empty, operationName=Optional.empty, partial=Optional.empty,\n   * noteDbFilePath=Optional.empty, noteDbRefName=Optional.empty,\n   * noteDbSequenceType=Optional.empty, patchSetId=Optional.empty, pluginMetadata=[],\n   * pluginName=Optional.empty, projectName=Optional.empty, pushType=Optional.empty,\n   * requestType=Optional.empty, resourceCount=Optional.empty, restViewName=Optional.empty,\n   * revision=Optional.empty, username=Optional.empty}\n   * \u003c/pre\u003e\n   *\n   * \u003cp\u003eThat's hard to read in logs. This is why this method\n   *\n   * \u003cul\u003e\n   *   \u003cli\u003edrops fields which have {@code Optional.empty} as value and\n   *   \u003cli\u003ereformats values that are {@code Optional[value]} to {@code value}.\n   * \u003c/ul\u003e\n   *\n   * \u003cp\u003eFor the example given above the formatted string would look like this:\n   *\n   * \u003cpre\u003e\n   * Metadata{changeId=9212550, indexVersion=0, pluginMetadata=[]}\n   * \u003c/pre\u003e\n   *\n   * @return string representation of this instance that is suitable for logging\n   */\n  LazyArg\u003cString\u003e toStringForLoggingLazy() {\n    // Don't use a lambda because different compilers generate different method names for lambdas,\n    // e.g. \"lambda$myFunction$0\" vs. just \"lambda$0\" in Eclipse. We need to identify the method\n    // by name to skip it and avoid infinite recursion.\n    return LazyArgs.lazy(this::toStringForLoggingImpl);\n  }\n\n  private String toStringForLoggingImpl() {\n    // Append class name.\n    String className = getClass().getSimpleName();\n    if (className.startsWith(\"AutoValue_\")) {\n      className = className.substring(10);\n    }\n    ToStringHelper stringHelper = MoreObjects.toStringHelper(className);\n\n    // Append key-value pairs for field which are set.\n    Method[] methods = Metadata.class.getDeclaredMethods();\n    Arrays.sort(methods, Comparator.comparing(Method::getName));\n    for (Method method : methods) {\n      if (Modifier.isStatic(method.getModifiers())) {\n        // skip static method\n        continue;\n      }\n\n      if (method.getName().equals(\"toStringForLoggingLazy\")\n          || method.getName().equals(\"toStringForLoggingImpl\")) {\n        // Don't call myself in infinite recursion.\n        continue;\n      }\n\n      if (method.getReturnType().equals(Void.TYPE) || method.getParameterCount() \u003e 0) {\n        // skip method since it's not a getter\n        continue;\n      }\n\n      method.setAccessible(true);\n\n      Object returnValue;\n      try {\n        returnValue = method.invoke(this);\n      } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\n        // should never happen\n        throw new IllegalStateException(e);\n      }\n\n      if (returnValue instanceof Optional) {\n        Optional\u003c?\u003e fieldValueOptional = (Optional\u003c?\u003e) returnValue;\n        if (!fieldValueOptional.isPresent()) {\n          // drop this key-value pair\n          continue;\n        }\n\n        // format as 'key=value' instead of 'key=Optional[value]'\n        stringHelper.add(method.getName(), fieldValueOptional.get());\n      } else {\n        // not an Optional value, keep as is\n        stringHelper.add(method.getName(), returnValue);\n      }\n    }\n\n    return stringHelper.toString();\n  }\n\n  public static Metadata.Builder builder() {\n    return new AutoValue_Metadata.Builder();\n  }\n\n  public static Metadata empty() {\n    return builder().build();\n  }\n\n  @AutoValue.Builder\n  public abstract static class Builder {\n    public abstract Builder accountId(int accountId);\n\n    public abstract Builder actionType(@Nullable String actionType);\n\n    public abstract Builder authDomainName(@Nullable String authDomainName);\n\n    public abstract Builder branchName(@Nullable String branchName);\n\n    public abstract Builder cacheKey(@Nullable String cacheKey);\n\n    public abstract Builder cacheName(@Nullable String cacheName);\n\n    public abstract Builder className(@Nullable String className);\n\n    public abstract Builder cancellationReason(@Nullable String cancellationReason);\n\n    public abstract Builder changeId(int changeId);\n\n    public abstract Builder changeIdType(@Nullable String changeIdType);\n\n    public abstract Builder cause(@Nullable String cause);\n\n    public abstract Builder commentSide(int side);\n\n    public abstract Builder commit(@Nullable String commit);\n\n    public abstract Builder diffAlgorithm(@Nullable String diffAlgorithm);\n\n    public abstract Builder eventType(@Nullable String eventType);\n\n    public abstract Builder exportValue(@Nullable String exportValue);\n\n    public abstract Builder filePath(@Nullable String filePath);\n\n    public abstract Builder garbageCollectorName(@Nullable String garbageCollectorName);\n\n    public abstract Builder gitOperation(@Nullable String gitOperation);\n\n    public abstract Builder groupId(int groupId);\n\n    public abstract Builder groupName(@Nullable String groupName);\n\n    public abstract Builder groupSystem(@Nullable String groupSystem);\n\n    public abstract Builder groupUuid(@Nullable String groupUuid);\n\n    public abstract Builder httpStatus(int httpStatus);\n\n    public abstract Builder indexName(@Nullable String indexName);\n\n    public abstract Builder indexVersion(int indexVersion);\n\n    public abstract Builder memoryPoolName(@Nullable String memoryPoolName);\n\n    public abstract Builder methodName(@Nullable String methodName);\n\n    public abstract Builder multiple(boolean multiple);\n\n    public abstract Builder operationName(String operationName);\n\n    public abstract Builder partial(boolean partial);\n\n    public abstract Builder outdated(boolean outdated);\n\n    public abstract Builder noteDbFilePath(@Nullable String noteDbFilePath);\n\n    public abstract Builder noteDbRefName(@Nullable String noteDbRefName);\n\n    public abstract Builder noteDbSequenceType(@Nullable String noteDbSequenceType);\n\n    public abstract Builder patchSetId(int patchSetId);\n\n    abstract ImmutableList.Builder\u003cPluginMetadata\u003e pluginMetadataBuilder();\n\n    public Builder addPluginMetadata(PluginMetadata pluginMetadata) {\n      pluginMetadataBuilder().add(pluginMetadata);\n      return this;\n    }\n\n    public abstract Builder pluginName(@Nullable String pluginName);\n\n    public abstract Builder projectName(@Nullable String projectName);\n\n    public abstract Builder pushType(@Nullable String pushType);\n\n    public abstract Builder requestType(@Nullable String requestType);\n\n    public abstract Builder resourceCount(int resourceCount);\n\n    public abstract Builder restViewName(@Nullable String restViewName);\n\n    public abstract Builder revision(@Nullable String revision);\n\n    public abstract Builder submitRequirementName(@Nullable String srName);\n\n    public abstract Builder username(@Nullable String username);\n\n    public abstract Metadata build();\n  }\n}\n",
        "name": "Metadata.java",
        "path": "java/com/google/gerrit/server/logging/Metadata.java",
        "url": "/gerrit.googlesource.com/gerrit/-/blob/java/com/google/gerrit/server/logging/Metadata.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              36,
              9
            ]
          ],
          "preview": "  public abstract Optional\u003cInteger\u003e accountId();"
        },
        {
          "limitHit": false,
          "lineNumber": 291,
          "offsetAndLengths": [
            [
              28,
              9
            ],
            [
              42,
              9
            ]
          ],
          "preview": "    public abstract Builder accountId(int accountId);"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.auto.value.AutoValue;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.common.base.MoreObjects;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.common.base.MoreObjects.ToStringHelper;"
        },
        {
          "limitHit": false,
          "lineNumber": 19,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.common.collect.ImmutableList;"
        },
        {
          "limitHit": false,
          "lineNumber": 20,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.common.flogger.LazyArg;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.common.flogger.LazyArgs;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.gerrit.common.Nullable;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import java.lang.reflect.InvocationTargetException;"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import java.lang.reflect.Method;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import java.lang.reflect.Modifier;"
        },
        {
          "limitHit": false,
          "lineNumber": 26,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import java.util.Arrays;"
        },
        {
          "limitHit": false,
          "lineNumber": 27,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import java.util.Comparator;"
        },
        {
          "limitHit": false,
          "lineNumber": 28,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import java.util.Optional;"
        },
        {
          "limitHit": false,
          "lineNumber": 187,
          "offsetAndLengths": [
            [
              14,
              9
            ]
          ],
          "preview": "   * Metadata{accountId=Optional.empty, actionType=Optional.empty, authDomainName=Optional.empty,"
        }
      ],
      "repository": {
        "name": "gerrit.googlesource.com/gerrit",
        "url": "/gerrit.googlesource.com/gerrit"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "bb6b2bf6293ab3c20f0d52b7ca53adb03f6dedd3"
        },
        "content": "// Copyright (C) 2008 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.gerrit.entities;\n\nimport com.google.auto.value.AutoValue;\nimport com.google.common.primitives.Shorts;\nimport java.time.Instant;\nimport java.util.Optional;\n\n/** An approval (or negative approval) on a patch set. */\n@AutoValue\npublic abstract class PatchSetApproval {\n  public static Key key(PatchSet.Id patchSetId, Account.Id accountId, LabelId labelId) {\n    return new AutoValue_PatchSetApproval_Key(patchSetId, accountId, labelId);\n  }\n\n  @AutoValue\n  public abstract static class Key {\n    public abstract PatchSet.Id patchSetId();\n\n    public abstract Account.Id accountId();\n\n    public abstract LabelId labelId();\n\n    public boolean isLegacySubmit() {\n      return LabelId.LEGACY_SUBMIT_NAME.equals(labelId().get());\n    }\n  }\n\n  /**\n   * Globally unique identifier.\n   *\n   * \u003cp\u003eThe identifier is unique to each granted approval, i.e. approvals, re-added within same\n   * {@link Change} or even {@link PatchSet} have different {@link UUID}.\n   */\n  @AutoValue\n  public abstract static class UUID implements Comparable\u003cUUID\u003e {\n\n    abstract String uuid();\n\n    public String get() {\n      return uuid();\n    }\n\n    @Override\n    public final int compareTo(UUID o) {\n      return uuid().compareTo(o.uuid());\n    }\n\n    @Override\n    public final String toString() {\n      return get();\n    }\n  }\n\n  public static UUID uuid(String n) {\n    return new AutoValue_PatchSetApproval_UUID(n);\n  }\n\n  public static Builder builder() {\n    return new AutoValue_PatchSetApproval.Builder().postSubmit(false).copied(false);\n  }\n\n  @AutoValue.Builder\n  public abstract static class Builder {\n    public abstract Builder key(Key key);\n\n    public abstract Key key();\n\n    /**\n     * {@link UUID} of {@link PatchSetApproval}.\n     *\n     * \u003cp\u003eOptional, since it might be missing for approvals, granted (persisted in NoteDB), before\n     * {@link UUID} was introduced and does not apply to removals ( represented as approval with\n     * {@link #value}, set to '0').\n     */\n    public abstract Builder uuid(Optional\u003cUUID\u003e uuid);\n\n    public abstract Builder uuid(UUID uuid);\n\n    public abstract Builder value(short value);\n\n    public Builder value(int value) {\n      return value(Shorts.checkedCast(value));\n    }\n\n    public abstract Builder granted(Instant granted);\n\n    public abstract Builder tag(String tag);\n\n    public abstract Builder tag(Optional\u003cString\u003e tag);\n\n    public abstract Builder realAccountId(Account.Id realAccountId);\n\n    abstract Optional\u003cAccount.Id\u003e realAccountId();\n\n    public abstract Builder postSubmit(boolean isPostSubmit);\n\n    public abstract Builder copied(boolean isCopied);\n\n    abstract PatchSetApproval autoBuild();\n\n    public PatchSetApproval build() {\n      if (!realAccountId().isPresent()) {\n        realAccountId(key().accountId());\n      }\n      return autoBuild();\n    }\n  }\n\n  public abstract Key key();\n\n  public abstract Optional\u003cUUID\u003e uuid();\n\n  /**\n   * Value assigned by the user.\n   *\n   * \u003cp\u003eThe precise meaning of \"value\" is up to each category.\n   *\n   * \u003cp\u003eIn general:\n   *\n   * \u003cul\u003e\n   *   \u003cli\u003e\u003cb\u003e\u0026lt; 0:\u003c/b\u003e The approval is rejected/revoked.\n   *   \u003cli\u003e\u003cb\u003e= 0:\u003c/b\u003e No indication either way is provided.\n   *   \u003cli\u003e\u003cb\u003e\u0026gt; 0:\u003c/b\u003e The approval is approved/positive.\n   * \u003c/ul\u003e\n   *\n   * and in the negative and positive direction a magnitude can be assumed.The further from 0 the\n   * more assertive the approval.\n   */\n  public abstract short value();\n\n  public abstract Instant granted();\n\n  public abstract Optional\u003cString\u003e tag();\n\n  /** Real user that made this approval on behalf of the user recorded in {@link Key#accountId}. */\n  public abstract Account.Id realAccountId();\n\n  public abstract boolean postSubmit();\n\n  public abstract boolean copied();\n\n  public abstract Builder toBuilder();\n\n  /**\n   * Makes a copy of {@link PatchSetApproval} that applies to {@code psId}.\n   *\n   * \u003cp\u003eThe returned {@link PatchSetApproval} has the same {@link UUID} as the original {@link\n   * PatchSetApproval}, which is generated when it is originally granted.\n   *\n   * \u003cp\u003eThis is needed since we want to keep the link between the original {@link PatchSetApproval}\n   * and the {@link #copied} one.\n   *\n   * @param psId {@link PatchSet.Id} of {@link PatchSet} that the copy should be applied to.\n   * @return {@link #copied} {@link PatchSetApproval} that applies to {@code psId}.\n   */\n  public PatchSetApproval copyWithPatchSet(PatchSet.Id psId) {\n    return toBuilder()\n        .key(key(psId, key().accountId(), key().labelId()))\n        .uuid(uuid())\n        .copied(true)\n        .build();\n  }\n\n  public PatchSet.Id patchSetId() {\n    return key().patchSetId();\n  }\n\n  public Account.Id accountId() {\n    return key().accountId();\n  }\n\n  public LabelId labelId() {\n    return key().labelId();\n  }\n\n  public String label() {\n    return labelId().get();\n  }\n\n  public boolean isLegacySubmit() {\n    return key().isLegacySubmit();\n  }\n}\n",
        "name": "PatchSetApproval.java",
        "path": "java/com/google/gerrit/entities/PatchSetApproval.java",
        "url": "/gerrit.googlesource.com/gerrit/-/blob/java/com/google/gerrit/entities/PatchSetApproval.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 32,
          "offsetAndLengths": [
            [
              31,
              9
            ]
          ],
          "preview": "    public abstract Account.Id accountId();"
        },
        {
          "limitHit": false,
          "lineNumber": 181,
          "offsetAndLengths": [
            [
              20,
              9
            ]
          ],
          "preview": "  public Account.Id accountId() {"
        },
        {
          "limitHit": false,
          "lineNumber": 104,
          "offsetAndLengths": [
            [
              32,
              9
            ],
            [
              57,
              9
            ]
          ],
          "preview": "    public abstract Builder realAccountId(Account.Id realAccountId);"
        },
        {
          "limitHit": false,
          "lineNumber": 106,
          "offsetAndLengths": [
            [
              38,
              9
            ]
          ],
          "preview": "    abstract Optional\u003cAccount.Id\u003e realAccountId();"
        },
        {
          "limitHit": false,
          "lineNumber": 149,
          "offsetAndLengths": [
            [
              33,
              9
            ]
          ],
          "preview": "  public abstract Account.Id realAccountId();"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.auto.value.AutoValue;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import com.google.common.primitives.Shorts;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import java.time.Instant;"
        },
        {
          "limitHit": false,
          "lineNumber": 19,
          "offsetAndLengths": [
            [
              0,
              6
            ]
          ],
          "preview": "import java.util.Optional;"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              59,
              9
            ]
          ],
          "preview": "  public static Key key(PatchSet.Id patchSetId, Account.Id accountId, LabelId labelId) {"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              58,
              9
            ]
          ],
          "preview": "    return new AutoValue_PatchSetApproval_Key(patchSetId, accountId, labelId);"
        },
        {
          "limitHit": false,
          "lineNumber": 115,
          "offsetAndLengths": [
            [
              15,
              9
            ]
          ],
          "preview": "      if (!realAccountId().isPresent()) {"
        }
      ],
      "repository": {
        "name": "gerrit.googlesource.com/gerrit",
        "url": "/gerrit.googlesource.com/gerrit"
      }
    }
  ],
  "LimitHit": true,
  "Cloning": [
    {
      "name": "npm/typescript-char"
    },
    {
      "name": "npm/types/command-exists"
    },
    {
      "name": "npm/types/diff"
    },
    {
      "name": "npm/types/google-protobuf"
    },
    {
      "name": "npm/commander"
    },
    {
      "name": "npm/pyright-internal"
    },
    {
      "name": "npm/copy-webpack-plugin"
    },
    {
      "name": "npm/pyright-root"
    },
    {
      "name": "npm/webpack"
    },
    {
      "name": "npm/types/vscode"
    },
    {
      "name": "npm/detect-indent"
    },
    {
      "name": "npm/types/yargs"
    },
    {
      "name": "npm/types/glob"
    },
    {
      "name": "npm/p-queue"
    },
    {
      "name": "maven/dev.gradleplugins/gradle-api"
    }
  ],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 30,
  "ElapsedMilliseconds": 68,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
